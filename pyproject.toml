[project]
name = "cadwyn"
version = "4.6.0"
description = "Production-ready community-driven modern Stripe-like API versioning in FastAPI"
authors = [{ name = "Stanislav Zmiev", email = "zmievsa@gmail.com" }]
license = "MIT"
readme = "README.md"
requires-python = ">=3.10"
keywords = [
    "python",
    "api",
    "json-schema",
    "stripe",
    "versioning",
    "code-generation",
    "hints",
    "api-versioning",
    "pydantic",
    "fastapi",
    "python310",
    "python311",
    "python312",
    "python313",
]
classifiers = [
    "Intended Audience :: Information Technology",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Internet",
    "Topic :: Software Development :: Libraries :: Application Frameworks",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Libraries",
    "Topic :: Software Development",
    "Typing :: Typed",
    "Development Status :: 5 - Production/Stable",
    "Environment :: Web Environment",
    "Framework :: AsyncIO",
    "Framework :: FastAPI",
    "Framework :: Pydantic",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Topic :: Internet :: WWW/HTTP :: HTTP Servers",
    "Topic :: Internet :: WWW/HTTP",
]
dependencies = [
    "fastapi >=0.112.3",
    "starlette >=0.30.0",
    "pydantic >=2.0.0",
    "jinja2 >=3.1.2",
    "issubclass >=0.1.2",
    "backports-strenum >=1.3.1,<2; python_version < '3.11'",
    "typing-extensions>=4.8.0",
]


[project.optional-dependencies]
standard = ["fastapi[standard]>=0.112.3", "typer>=0.7.0"]

[tool.uv]
dev-dependencies = [
    "python-multipart >=0.0.6",
    "better-devtools ~=0.13.3",
    "pytest-sugar ~=1.0.0",
    # tests
    "svcs ~=24.1.0",
    "httpx >=0.26.0",
    "pytest-fixture-classes >=1.0.3",
    "pytest >=7.2.1",
    "pytest-cov >=4.0.0",
    "dirty-equals >=0.6.0",
    "uvicorn ~=0.23.0",
    # type checking
    "pyright>=1.1.390",
    # docs
    "mkdocs >=1.5.2",
    "mkdocs-material >=9.3.1",
    "mkdocs-simple-hooks >=0.1.5",
    "mdx-include ~=1.4.2",
    "mike >=2.1.2, <3",
    "pdbpp>=0.10.3",
]

[project.urls]
"Source code" = "https://github.com/zmievsa/cadwyn"
Documentation = "https://docs.cadwyn.dev"


[project.scripts]
cadwyn = "cadwyn.__main__:app"


[tool.coverage.run]
data_file = "coverage/coverage"
parallel = true
branch = true

[tool.coverage.report]
fail_under = 100
skip_covered = true
skip_empty = true
# Taken from https://coverage.readthedocs.io/en/7.1.0/excluding.html#advanced-exclusion
exclude_lines = [
    "pragma: no cover",
    "assert_never\\(",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if False:",
    "assert_never",
    "if 0:",
    "class .*\\bProtocol\\):",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
    "@(typing\\.)?overload",
    "__rich_repr__",
    "__repr__",
    "def .+: \\.\\.\\.",
]
omit = ["./docs/plugin.py", "./site/plugin.py", "scripts/*.py"]

[tool.pyright]
reportMissingImports = true
strictListInference = true
strictDictionaryInference = true
strictSetInference = true
reportPropertyTypeMismatch = true
reportImportCycles = true
reportUntypedFunctionDecorator = "warning"
reportUntypedClassDecorator = "warning"
reportUntypedBaseClass = "warning"
reportDeprecated = "warning"
reportInvalidTypeVarUse = true
reportUnnecessaryCast = true
reportUnnecessaryComparison = true
reportUnnecessaryContains = true
reportAssertAlwaysTrue = true
reportUnsupportedDunderAll = true
reportUnnecessaryTypeIgnoreComment = true
reportMissingSuperCall = true
reportFunctionMemberAccess = false
reportCircularImports = true
reportInvalidTypeForm = false

[tool.pytest.ini_options]
filterwarnings = [
    # When debugging `ResourceWarning`s, change this to "all" and set PYTHONTRACEMALLOC.
    "error",

    # Older starlette syntax is currently supported.
    "ignore:The `name` is not the first parameter anymore:DeprecationWarning:starlette.templating",
    "ignore:The on_startup and on_shutdown parameters are deprecated:DeprecationWarning:starlette.routing",

    # Older pydantic syntax is currently supported.
    "ignore:Using extra keyword arguments on `Field` is deprecated:DeprecationWarning:pydantic.fields",
    "ignore:Pydantic V1 style `@root_validator` validators are deprecated:pydantic.PydanticDeprecatedSince20",
    "ignore:Pydantic V1 style `@validator` validators are deprecated:pydantic.PydanticDeprecatedSince20",

    # starlette fails to close an anyio `MemoryObjectReceiveStream` that it opens.
    "ignore:Unclosed .MemoryObjectReceiveStream:ResourceWarning:anyio.streams.memory",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"
